!function(){"use strict";const e=new class{constructor(e){let{baseUrl:t,headers:s}=e;this.baseUrl=t,this.headers=s}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this.headers}).then(this._handleRequest)}updateProfile(e,t){return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:e,about:t})}).then(this._handleRequest)}updateAvatar(e){return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})}).then(this._handleRequest)}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{headers:this.headers}).then(this._handleRequest)}addNewCard(e){return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify(e)}).then(this._handleRequest)}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers}).then(this._handleRequest)}addLike(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this.headers}).then(this._handleRequest)}removeLike(e){return fetch(`${this.baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this.headers}).then(this._handleRequest)}_handleRequest(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"25fa860b-0207-4525-82fb-69fc255d22d5","Content-Type":"application/json"}}),t=(document.querySelector(".cards__list"),document.querySelector("#edit-profile-modal"),document.querySelector("#delete-card-modal"),document.querySelector("#preview-image-modal")),s=document.querySelector("#edit-profile-form"),n=document.querySelector("#add-card-form"),r=document.querySelector("#edit-avatar-modal"),i=(document.querySelectorAll(".modal__close"),document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector(".avatar__image"),t.querySelector(".modal__image"),t.querySelector(".modal__description"),s.querySelector(".modal__input_type_name")),o=s.querySelector(".modal__input_type_description"),a=document.querySelector(".profile__edit-button"),l=document.querySelector(".avatar__edit-button"),d=document.querySelector(".profile__add-button"),c=(document.querySelector(".card__delete-button"),{formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"});class u{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()}))}}var h=class extends u{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._submitButton=this._popupElement.querySelector(".modal__button"),this._buttonText=this._submitButton.textContent}_getInputValues(){const e=this._popupForm.querySelectorAll(".modal__input"),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setButtonText(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._buttonText}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}};class _{constructor(e,t,s,n,r){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=n,this._handleLikeClick=r}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick({link:this._link,name:this._name})}))}getIsLiked(){return this._isLiked}getId(){return this._id}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}handleLikeIcon(){console.log("changed isliked from",this._isLiked),this._isLiked=!this._isLiked,console.log("changed isliked to",this._isLiked),this._likeButton.classList.toggle("card__like-button_active")}getView(){this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);const e=this._cardElement.querySelector(".card__image"),t=this._cardElement.querySelector(".card__title");return e.src=this._link,e.alt=this._name,t.textContent=this._name,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active"),this._setEventListeners(),this._cardElement}}class m{constructor(e,t){this._settings=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._submitButton=this._formElement.querySelector(this._settings.submitButtonSelector)}enableValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._formElement.addEventListener("submit",(e=>{e.preventDefault()}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_toggleButtonState(){this._hasInvalidInput()?this.disableSubmitButton():this._enableSubmitButton()}disableSubmitButton=()=>{this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0};_enableSubmitButton=()=>{this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1};_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.textContent="",t.classList.remove(this._settings.errorClass)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}}const p=new m(c,r);p.enableValidation();const E=new m(c,s);E.enableValidation();const b=new m(c,n);function v(e){return new _(e,"#card-template",f,B,I).getView()}b.enableValidation();const S=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(e){e.forEach((e=>this._renderer(e)))}}({renderer:e=>{S.addItem(v(e))}},".cards__list");function f(e){q.open(e)}e.getInitialCards().then((e=>{S.renderItems(e)})).catch((e=>{console.error("Error fetching initial cards:",e)}));const g=new h("#add-card-modal",(t=>{const s={name:t.title,link:t.link};g.setButtonText(!0),e.addNewCard(s).then((e=>{S.addItem(v(e)),b.disableSubmitButton(),n.reset(),g.close()})).catch((e=>{console.error("Error adding new card: ",e)})).finally((()=>{g.setButtonText()}))}));g.setEventListeners(),d.addEventListener("click",(()=>{g.open()})),e.getUserInfo().then((e=>{L.setUserInfo(e),L.setUserAvatar(e)})).catch((e=>{console.error("info not fetched from the server",e)}));const y=new h("#edit-profile-modal",(t=>{const s=t.name,n=t.description;y.setButtonText(!0),e.updateProfile(s,n).then((e=>{L.setUserInfo({name:e.name,about:e.about}),E.disableSubmitButton(),y.close()})).catch((e=>{console.error("info not updated",e)})).finally((()=>{y.setButtonText()}))})),L=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:n}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(n)}getUserInfo(){return{title:this._nameElement.textContent,description:this._jobElement.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}setUserAvatar(e){let{avatar:t}=e;this._avatarElement.src=t}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".avatar__image"});y.setEventListeners(),a.addEventListener("click",(()=>{y.open();const e=L.getUserInfo();i.value=e.title,o.value=e.description,E.resetValidation()}));const k=new h("#edit-avatar-modal",(t=>{const s=t.avatar;s?(k.setButtonText(!0),e.updateAvatar(s).then((e=>{L.setUserAvatar(e),p.disableSubmitButton(),k.close()})).catch((e=>{console.error(e)})).finally((()=>{k.setButtonText()}))):console.error("URL missing")}));k.setEventListeners(),l.addEventListener("click",(()=>{k.open()}));const q=new class extends u{constructor(e){super(e),this._image=this._popupElement.querySelector(".modal__image"),this._caption=this._popupElement.querySelector(".modal__description")}open(e){let{link:t,name:s}=e;this._image.src=t,this._image.alt=s,this._caption.textContent=s,super.open()}}({popupSelector:"#preview-image-modal"});q.setEventListeners();const C=new class extends u{constructor(e){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button"),this._buttonText=this._submitButton.textContent}setSubmitAction(e){this._handleFormSubmit=e}setButtonText(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";this._submitButton.textContent=e?t:this._buttonText}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}}({popupSelector:"#delete-card-modal"});function B(t){C.open(),C.setSubmitAction((()=>{C.setButtonText(!0),e.deleteCard(t._id).then((()=>{t.handleDeleteCard(),C.close()})).catch((e=>{console.error("Error deleting card: ",e)})).finally((()=>{C.setButtonText()}))}))}function I(t){t.getIsLiked()?e.removeLike(t.getId()).then((()=>{t.handleLikeIcon()})).catch((e=>{console.error("Error removing like: ",e)})):e.addLike(t.getId()).then((()=>{t.handleLikeIcon()})).catch((e=>{console.error("Error adding like: ",e)}))}C.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,